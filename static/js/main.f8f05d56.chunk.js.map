{"version":3,"sources":["components/esc.png","components/PopupWindow.js","components/Plot.js","components/Testapp.js","ContextManager.js","App.js","reportWebVitals.js","index.js"],"names":["TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","Typography","a11yProps","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","display","height","tabs","borderRight","divider","MyVerticallyCenteredModal","classes","useState","setValue","time","xposition","yposition","traction","aflow","modulenum","Modal","size","centered","Header","Title","Body","className","Tabs","orientation","variant","onChange","event","newValue","aria-label","Tab","label","style","paddingBottom","textAlign","fontSize","flexDirection","width","Button","color","onClick","window","localStorage","getItem","setItem","location","reload","fetch","Footer","Image","src","esc","rounded","Dataplot","flatdatares","data","count","lengthcount","trac","tracnum","i","push","j","k","String","getRandomColor","Math","floor","random","sort","a","b","console","log","flatdata","charts","linegroup","datakeyname1","datakeyname2","datakeyname3","rcolor","Line","type","dataKey","stroke","dot","ResponsiveContainer","LineChart","CartesianGrid","strokeDasharray","XAxis","YAxis","Tooltip","border","Testapp","mainVisRef","useRef","ifblock","ifhidecusor","changetraction","changeaflow","changemodulenum","changetime","feature","changeInput","input_from_panel","useEffect","init","onDocumentKeyDown","onWindowResize","processdata","onDocumentMouseMove","onDocumentMouseDown","animate","render","raycaster","setFromCamera","mouse","camera","intersects","intersectObjects","curveobjects","length","sphereInter","visible","position","copy","point","renderer","scene","vector","THREE","x","y","unproject","dir","sub","normalize","distance","z","pos","clone","add","multiplyScalar","toggle","spheres","spheresIndex","scale","set","sphere","clampScalar","clock","getDelta","requestAnimationFrame","preventDefault","clientX","mainVis","clientWidth","clientY","clientHeight","intersects2","tempcurveobjects","selectedcurve","num_of_datapoints","object","name","material","opacity","intersect","tempcurves","direction","tlineGeometry","setAttribute","tlineMaterial","transparent","tobject","all_object","curveid","setHex","api_set","method","headers","body","JSON","stringify","input","Array","from","then","res","json","remove","smallcurveobjects","inputdata","curvecount","startp","endp","aspect","updateProjectionMatrix","setSize","keyCode","which","rotateY","document","cursor","info","createElement","top","camera_pivot","lookAt","geometry","curves","lineGeometry","lineMaterial","params","threshold","sphereGeometry","sphereMaterial","sizeAttenuation","antialias","setPixelRatio","devicePixelRatio","appendChild","domElement","addEventListener","required","split","res2","back","Set","current","modalShow","setshow","escFunction","removeEventListener","ref","show","backdrop","MyContext","React","createContext","App","ifsuccess","changesuccess","Provider","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f8f05d56.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/esc.ece60bb7.png\";","import { Modal } from 'react-bootstrap';\r\nimport { Buttonb } from 'react-bootstrap';\r\nimport Image from 'react-bootstrap/Image'\r\nimport {  useState, useEffect } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport esc from './esc.png'\r\nimport Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`vertical-tabpanel-${index}`}\r\n        aria-labelledby={`vertical-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3}>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n  };\r\n  \r\n  function a11yProps(index) {\r\n    return {\r\n      id: `vertical-tab-${index}`,\r\n      'aria-controls': `vertical-tabpanel-${index}`,\r\n    };\r\n  }\r\n  \r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      backgroundColor: theme.palette.background.paper,\r\n      display: 'flex',\r\n      height: 224,\r\n    },\r\n    tabs: {\r\n      borderRight: `1px solid ${theme.palette.divider}`,\r\n    },\r\n  }));\r\n\r\nconst MyVerticallyCenteredModal = (props) => {\r\n\r\n    function getNone(){\r\n        fetch('/deleteall')\r\n        window.location.reload()\r\n    }\r\n\r\n    function analysismode(){\r\n      if (window.localStorage.getItem('ifsplit') === 'false'){\r\n        window.localStorage.setItem('ifsplit', true);\r\n      }\r\n      else {\r\n          window.localStorage.setItem('ifsplit', false);\r\n      }\r\n      window.location.reload()\r\n    }\r\n    const classes = useStyles();\r\n    const [value, setValue] = useState(0);\r\n    const [state, setSwitchState] = useState({\r\n      time: true,\r\n      xposition: true,\r\n      yposition: true,\r\n      traction: false,\r\n      aflow: false,\r\n      modulenum: false\r\n    });\r\n    const [panel_input, setPanelInput] = useState(['cell_pos_x', 'cell_pos_y', 'time'])\r\n    let nameDict = {\r\n      time: 'time',\r\n      xposition: 'cell_pos_x',\r\n      yposition: 'cell_pos_y',\r\n      traction: 'traction',\r\n      aflow: 'aflow',\r\n      modulenum: 'module_num'\r\n    }\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    const handleSwitchChange = (event) => {\r\n        setSwitchState({...state, [event.target.name]: event.target.checked})\r\n        if (event.target.checked){\r\n          setPanelInput(oldarray => [...oldarray, nameDict[event.target.name]])\r\n        } else {\r\n          const newstate = panel_input.filter((item) => item !== nameDict[event.target.name]);\r\n          setPanelInput(oldarray => newstate)\r\n        }\r\n        props.changeInput(panel_input)\r\n    };\r\n    //console.log(panel_input)\r\n    return (\r\n        \r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Settings\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <div className={classes.root}>\r\n            <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                className={classes.tabs}\r\n            >\r\n                <Tab label=\"tutorial\" {...a11yProps(0)} />\r\n                \r\n                {/*\r\n                <Tab label=\"data\" {...a11yProps(1)} />\r\n                <Tab label=\"clustering\" {...a11yProps(1)} />\r\n                <Tab label=\"algorithm\" {...a11yProps(2)} />\r\n                <Tab label=\"threshold\" {...a11yProps(3)} />\r\n                */}\r\n                <Tab label=\"options\" {...a11yProps(1)} />\r\n            </Tabs>\r\n            <TabPanel value={value} index={0}>\r\n              <ul>\r\n                <li style = {{paddingBottom: '8px'}}>You can rotate the visualization by pressing and <br /> holding the \"←\" or \"→\" key on your keyboard </li>\r\n                <li style = {{paddingBottom: '8px'}}>Once you start working on a curve, the other curves <br />will be disabled from being selected</li>\r\n                <li>To clear the scene, please press \"Esc\" on your keyboard <br /> to open the setting panel and click \"CLEAR CANVAS\"</li>\r\n              </ul>\r\n              <p  style = {{textAlign: 'right', fontSize: '20px'}}> -- Thanks!</p>\r\n            </TabPanel>\r\n            {/*\r\n            <TabPanel value={value} index={1}>\r\n                <FormGroup row>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={state.time}\r\n                                onChange={handleSwitchChange}\r\n                                name=\"time\"\r\n                            />\r\n                        }\r\n                        label=\"time\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={state.xposition}\r\n                                onChange={handleSwitchChange}\r\n                                name=\"xposition\"\r\n                            />\r\n                        }\r\n                        label=\"x-position\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={state.yposition}\r\n                                onChange={handleSwitchChange}\r\n                                name=\"yposition\"\r\n                            />\r\n                        }\r\n                        label=\"y-position\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup row>\r\n                <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={state.traction}\r\n                                onChange={handleSwitchChange}\r\n                                name=\"traction\"\r\n                            />\r\n                        }\r\n                        label=\"traction\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={state.aflow}\r\n                                onChange={handleSwitchChange}\r\n                                name=\"aflow\"\r\n                            />\r\n                        }\r\n                        label=\"aflow\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                checked={state.modulenum}\r\n                                onChange={handleSwitchChange}\r\n                                name=\"modulenum\"\r\n                            />\r\n                        }\r\n                        label=\"module num\"\r\n                    />\r\n                </FormGroup>\r\n            </TabPanel>\r\n            \r\n            <TabPanel value={value} index={1}>\r\n                Item Two\r\n            </TabPanel>\r\n            <TabPanel value={value} index={2}>\r\n                Item Three\r\n            </TabPanel>\r\n            <TabPanel value={value} index={3}>\r\n                Item Four\r\n            </TabPanel>\r\n            */}\r\n            <TabPanel value={value} index={1}>\r\n              <div style = {{height: '50px'}}></div> \r\n              <div style = {{display:'flex', flexDirection:'row'}}>\r\n              <div style = {{width: '122px'}}></div>\r\n              <Button \r\n                  variant=\"outlined\" \r\n                  color=\"secondary\" \r\n                  style = {{}}\r\n                  onClick={analysismode}\r\n              >\r\n                  switch analysis mode\r\n              </Button>\r\n              </div>\r\n            </TabPanel>\r\n         </div>\r\n         <div style = {{textAlign: 'center'}}>\r\n            <Button \r\n                variant=\"outlined\" \r\n                color=\"secondary\" \r\n                style = {{}}\r\n                onClick={getNone}\r\n            >\r\n                clear canvas\r\n            </Button>\r\n         </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\" size = 'sm'>\r\n            Press <Image src={esc} rounded style = {{width: '40px', height: '40px'}}></Image> to close\r\n          </Modal.Title>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  export default MyVerticallyCenteredModal\r\n","import React from 'react'\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer} from 'recharts';\r\n\r\nfunction Dataplot(props) {\r\n    let data = [];\r\n    let count = 0;\r\n    let lengthcount = 0;\r\n    let flatdatares = [];\r\n    if (props.traction && props.aflow && props.modulenum && props.time){\r\n        for (const trac in props.traction){\r\n            count = count + 1;\r\n        }\r\n        for (const tracnum in props.traction[0]){\r\n            lengthcount = lengthcount + 1;\r\n        }\r\n        for (let i = 0; i < count; i++){\r\n            data.push([])\r\n            for (let j = 0; j < lengthcount; j ++){\r\n                data[i].push({})\r\n            }\r\n        }\r\n        for (let i = 0; i < count; i++){\r\n            for (let k = 0; k < lengthcount; k++){\r\n                data[i][k][\"traction\"+String(i)] = props.traction[i][k]\r\n            }\r\n        }\r\n        for (let i = 0; i < count; i++){\r\n            for (let k = 0; k < lengthcount; k++){\r\n                data[i][k][\"aflow\"+String(i)] = props.aflow[i][k]\r\n            }\r\n        }\r\n        for (let i = 0; i < count; i++){\r\n            for (let k = 0; k < lengthcount; k++){\r\n                data[i][k][\"modulenum\"+String(i)] = props.modulenum[i][k]\r\n            }\r\n        }\r\n        for (let i = 0; i < count; i++){\r\n            for (let k = 0; k < lengthcount; k++){\r\n                data[i][k][\"time\"] = props.time[i][k]\r\n            }\r\n        }\r\n    }\r\n    function getRandomColor() {\r\n        var letters = '0123456789ABCDEF';\r\n        var color = '#';\r\n        for (var i = 0; i < 6; i++) {\r\n          color += letters[Math.floor(Math.random() * 16)];\r\n        }\r\n        return color;\r\n    }\r\n\r\n    function mycompare( a, b ) {\r\n        if ( a[0]['time'] < b[0]['time'] ){\r\n          return -1;\r\n        }\r\n        if ( a[0]['time'] > b[0]['time'] ){\r\n          return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    function flatdata(data){\r\n        let flatdata = []\r\n        for(let i = 0; i < count; i ++){\r\n            for (let j = 0; j < lengthcount; j ++){\r\n                flatdata.push(data[i][j])\r\n            }\r\n        }\r\n        return flatdata\r\n    }\r\n    data.sort(mycompare)\r\n    console.log(data)\r\n    flatdatares = flatdata(data)\r\n\r\n    let charts = [];\r\n    let linegroup = [[],[],[]];\r\n    for (let i = 0; i < count; i++){\r\n        let datakeyname1 = \"traction\" + String(i)\r\n        let datakeyname2 = \"aflow\" + String(i)\r\n        let datakeyname3 = \"modulenum\" + String(i)\r\n        let rcolor = getRandomColor()\r\n        linegroup[0].push(\r\n            <Line\r\n                type=\"monotone\"\r\n                dataKey={datakeyname1}\r\n                stroke={rcolor}\r\n                dot={false}\r\n            />\r\n        )\r\n        linegroup[1].push(\r\n            <Line\r\n                type=\"monotone\"\r\n                dataKey={datakeyname2}\r\n                stroke={rcolor}\r\n                dot={false}\r\n            />\r\n        )\r\n        linegroup[2].push(\r\n            <Line\r\n                type=\"monotone\"\r\n                dataKey={datakeyname3}\r\n                stroke={rcolor}\r\n                dot={false}\r\n            />\r\n        )\r\n    }\r\n    for (let i = 0; i < 3; i++){\r\n        charts.push(\r\n        <ResponsiveContainer width='90%' height=\"33%\">\r\n            <LineChart\r\n                data={flatdatares}\r\n            >\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"time\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            {linegroup[i]}\r\n            </LineChart>\r\n        </ResponsiveContainer>)\r\n    }\r\n    //data.sort(function(a,b) {return (a['time'] > b['time']) ? 1 : ((b['time'] > a['time']) ? -1 : 0);} )\r\n    return (\r\n        <div style = {{height : '100%', width: '50%', border: '10px solid rgba(0, 0, 0, 0.7)'}}>\r\n            {charts}\r\n        </div>\r\n    );\r\n  }\r\n  \r\nexport default Dataplot;","import React from 'react'\r\nimport { useRef, useCallback, useState, useEffect } from 'react'\r\nimport * as THREE from 'three';\r\nimport MyVerticallyCenteredModal from './PopupWindow'\r\nimport Dataplot from './Plot'\r\nconst Testapp = (props) => {\r\n    const mainVisRef = useRef(null);\r\n    let ifblock = true;\r\n    let ifhidecusor = false;\r\n    const [traction, changetraction] = useState(null);\r\n    const [aflow, changeaflow] = useState(null);\r\n    const [modulenum, changemodulenum] = useState(null);\r\n    const [time, changetime] = useState(null);\r\n    const [feature, changefeature] = useState(['cell_pos_x', 'cell_pos_y', 'time']);\r\n    if (window.localStorage.getItem('feature') === null){\r\n        window.localStorage.setItem('feature', feature)\r\n    }\r\n    function changeInput (input_from_panel){\r\n        //changefeature(old_array => input_from_panel)\r\n    }\r\n\r\n    useEffect( async  () => {\r\n        let data = null\r\n        let res = await fetch('/databasepost', \r\n            {   \r\n                method:'POST', \r\n                headers:{'Accept':'application/json', 'Content-type':'application/json'},\r\n                body: JSON.stringify({required: window.localStorage.getItem('feature').split(',')})\r\n            })\r\n        \r\n        let res2 = await fetch('/databaseget')\r\n        let back = await res2.json()\r\n        data = back[\"result\"]\r\n        \r\n        let spheresIndex = 0;\r\n        let api_set = new Set();\r\n        let curveid;\r\n        var vec = new THREE.Vector3();\r\n        var pos = new THREE.Vector3();\r\n        let curveobjects;\r\n        let clock, camera, scene, raycaster, renderer, parentTransform, sphereInter;\r\n        let tempcurveobjects = new THREE.Object3D();\r\n        let smallcurveobjects = new THREE.Object3D();\r\n        let selectedcurve = false;\r\n        const spheres = [];\r\n        const mouse = new THREE.Vector2();\r\n        const radius = 100;\r\n        let theta = 0;\r\n        let toggle = 0;\r\n        let controls;\r\n        const mainVis = mainVisRef.current;\r\n        let camera_pivot = new THREE.Object3D();\r\n        let angle = 0;\r\n        let all_object = new THREE.Object3D();\r\n        init();\r\n        animate();\r\n\r\n\r\n\r\n\r\n        function init() {\r\n\r\n\r\n            const info = document.createElement( 'div' );\r\n            info.style.position = 'absolute';\r\n            info.style.top = '10px';\r\n            info.style.width = '100%';\r\n            info.style.textAlign = 'center';\r\n            scene = new THREE.Scene();\r\n\r\n            scene.add(all_object);\r\n            all_object.add( camera_pivot );\r\n            camera_pivot.position.set(0, 200, 0)\r\n            camera = new THREE.PerspectiveCamera( 70, mainVis.clientWidth/mainVis.clientHeight, 1, 10000 );\r\n            camera.position.set( 0, 200, 300);\r\n            camera.lookAt( camera_pivot.position );\r\n            \r\n            clock = new THREE.Clock();\r\n            scene.background = new THREE.Color( 0xFFFFFF );\r\n\r\n            const geometry = new THREE.SphereGeometry( 2 );\r\n            const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\r\n\r\n            sphereInter = new THREE.Mesh( geometry, material );\r\n            sphereInter.visible = false;\r\n            all_object.add( sphereInter );\r\n\r\n            const curves = [];\r\n            curveobjects = new THREE.Object3D();\r\n            for (let j = 0; j < 20; j++) {\r\n                curves.push([])\r\n                for ( let i = 0; i < data[0][0].length; i ++ ) {\r\n                    const direction = new THREE.Vector3();\r\n                    const point = new THREE.Vector3();\r\n                    direction.x = data[j][0][i];\r\n                    direction.z = data[j][1][i];\r\n                    direction.y = data[j][2][i];\r\n                    point.add(direction);\r\n                    curves[j].push(point.x, point.y, point.z);\r\n                }\r\n                let lineGeometry = new THREE.BufferGeometry();\r\n                lineGeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( curves[j], 3 ) );\r\n                let lineMaterial = new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff , opacity: 1, transparent: true} );\r\n                const object = new THREE.Line( lineGeometry, lineMaterial );\r\n                object.name = j\r\n                curveobjects.add( object );\r\n            }\r\n            all_object.add(curveobjects)\r\n\r\n            raycaster = new THREE.Raycaster();\r\n            raycaster.params.Line.threshold = 3;\r\n            \r\n            const sphereGeometry = new THREE.SphereGeometry( 3, 32, 32 );\r\n            const sphereMaterial = new THREE.MeshBasicMaterial( { color: 0xff00ff , sizeAttenuation: false} );\r\n\r\n            for ( let i = 0; i < 40; i ++ ) {\r\n\r\n                const sphere = new THREE.Mesh( sphereGeometry, sphereMaterial );\r\n                scene.add( sphere );\r\n                spheres.push( sphere );\r\n\r\n            }\r\n\r\n            renderer = new THREE.WebGLRenderer( { antialias: true } );\r\n            renderer.setPixelRatio( window.devicePixelRatio );\r\n            renderer.setSize( mainVis.clientWidth, mainVis.clientHeight );\r\n            mainVis.appendChild( renderer.domElement );\r\n\r\n            window.addEventListener( 'mousemove', onDocumentMouseMove );\r\n            window.addEventListener( 'mousedown', onDocumentMouseDown );\r\n            window.addEventListener( 'resize', onWindowResize );\r\n            window.addEventListener( 'keydown', onDocumentKeyDown );\r\n            /*\r\n            controls = new OrbitControls( camera, renderer.domElement );\r\n            controls.update();\r\n            */\r\n        }\r\n        function onDocumentKeyDown(event) {\r\n            let keyCode = event.which;\r\n            if (keyCode == 37) {\r\n                all_object.rotateY(0.02)\r\n                //camera.position.x = 250 * Math.cos( angle )-250;  \r\n                //camera.position.z = 250 * Math.sin( angle )+300;\r\n                //angle += 0.005\r\n                //camera.lookAt( camera_pivot.position );\r\n            } else if (keyCode == 39) {\r\n                all_object.rotateY(-0.02)\r\n                //camera.position.x = 250 * Math.cos( angle )-250;  \r\n                //camera.position.z = 250 * Math.sin( angle )+300;\r\n                //angle -= 0.005\r\n                //camera.lookAt( camera_pivot.position );\r\n            }\r\n            else if(event.which == 27){\r\n                ifblock = !ifblock;\r\n                ifhidecusor = !ifhidecusor;\r\n                if(ifhidecusor){\r\n                    document.body.style.cursor = \"none\";\r\n                } else {\r\n                    document.body.style.cursor = \"default\";\r\n                }\r\n            }\r\n        }\r\n\r\n        function onWindowResize() {\r\n\r\n            camera.aspect = mainVis.clientWidth/mainVis.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n\r\n            renderer.setSize( mainVis.clientWidth, mainVis.clientHeight );\r\n\r\n        }\r\n\r\n        function processdata(inputdata){\r\n            //console.log(inputdata['results'][0][0])\r\n            for (let curvecount = 0; curvecount < inputdata['results'].length; curvecount++) {\r\n                let startp = inputdata['results'][curvecount][0]\r\n                let endp = inputdata['results'][curvecount][1]\r\n                let tempcurves = []\r\n                for (let i = startp+1; i <= endp; i++){\r\n                    tempcurves.push([])\r\n                    for (let j = 0; j < 2; j++){\r\n                        const direction = new THREE.Vector3();\r\n                        const point = new THREE.Vector3();\r\n                        direction.x = data[curvecount][0][i-j];\r\n                        direction.z = data[curvecount][1][i-j];\r\n                        direction.y = data[curvecount][2][i-j];\r\n                        point.add(direction);\r\n                        tempcurves[i-1-startp].push(point.x, point.y, point.z);\r\n                    }\r\n                    let tlineGeometry = new THREE.BufferGeometry();\r\n                    tlineGeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( tempcurves[i-1-startp], 3 ) );\r\n                    let tlineMaterial = new THREE.LineBasicMaterial( { color: 0xff0000 , opacity: 1, transparent: true} );\r\n                    const tobject = new THREE.Line( tlineGeometry, tlineMaterial );\r\n                    smallcurveobjects.add( tobject );\r\n                }\r\n            }\r\n            all_object.add(smallcurveobjects);\r\n        }\r\n\r\n        function onDocumentMouseMove( event ) {\r\n\r\n            event.preventDefault();\r\n\r\n            mouse.x = ( event.clientX / mainVis.clientWidth ) * 2 - 1;\r\n            mouse.y = - ( event.clientY / mainVis.clientHeight ) * 2 + 1;\r\n            \r\n\r\n        }\r\n        \r\n        function onDocumentMouseDown( event ) {\r\n            event.preventDefault();\r\n            /*\r\n            controls.enabled = false\r\n            */\r\n           if (!ifblock){\r\n            mouse.set( ( event.clientX / mainVis.clientWidth ) * 2 - 1, - ( event.clientY / mainVis.clientHeight ) * 2 + 1 );\r\n\r\n            raycaster.setFromCamera( mouse, camera );\r\n\r\n            const intersects = raycaster.intersectObjects( curveobjects.children );\r\n            const intersects2 = raycaster.intersectObjects( tempcurveobjects.children );\r\n            if (selectedcurve == false){\r\n                if ( intersects.length > 0 ) {\r\n                    let num_of_datapoints = data[intersects[0].object.name][0].length;\r\n                    for (let i = 0; i < 20; i++){\r\n                        curveobjects.children[i].material.opacity = 0.22;\r\n                    }\r\n                    const intersect = intersects[ 0 ];\r\n                    intersect.object.material.opacity = 1;\r\n                    render();\r\n                    let tempcurves = [];\r\n                    for (let i = 1; i < num_of_datapoints; i++){\r\n                        tempcurves.push([])\r\n                        for (let j = 0; j < 2; j++){\r\n                            const direction = new THREE.Vector3();\r\n                            const point = new THREE.Vector3();\r\n                            direction.x = data[intersect.object.name][0][i-j];\r\n                            direction.z = data[intersect.object.name][1][i-j];\r\n                            direction.y = data[intersect.object.name][2][i-j];\r\n                            point.add(direction);\r\n                            tempcurves[i-1].push(point.x, point.y, point.z);\r\n                        }\r\n                        let tlineGeometry = new THREE.BufferGeometry();\r\n                        tlineGeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( tempcurves[i-1], 3 ) );\r\n                        let tlineMaterial = new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff , opacity: 1, transparent: true} );\r\n                        const tobject = new THREE.Line( tlineGeometry, tlineMaterial );\r\n                        tobject.name = String((i-1));\r\n                        tempcurveobjects.add( tobject );\r\n                    }\r\n                    all_object.add(tempcurveobjects);\r\n                    selectedcurve = true;\r\n                    curveid = intersects[0].object.name\r\n                    intersect.object.visible = false\r\n                } else {\r\n                    selectedcurve = false;\r\n                    for (let i = 0; i < 20; i++){\r\n                        curveobjects.children[i].material.opacity = 1;\r\n                    }\r\n                }\r\n            } \r\n            else {\r\n                if (intersects2.length > 0){\r\n                    let num_of_datapoints = data[intersects[0].object.name][0].length;\r\n                    for (let i = 0; i < num_of_datapoints-1; i++){\r\n                        if (tempcurveobjects.children[i].material.opacity != 0.9314){\r\n                            tempcurveobjects.children[i].material.opacity = 0.5;\r\n                        }\r\n                    }\r\n                    const intersect = intersects2[0];\r\n                    intersect.object.material.color.setHex(0xff0000);\r\n                    intersect.object.material.opacity = 0.9314\r\n                    api_set.add(intersect.object.name)\r\n                    fetch('/api', \r\n                    {   \r\n                        method:'POST', \r\n                        headers:{'Accept':'application/json', 'Content-type':'application/json'},\r\n                        body: JSON.stringify({input: Array.from(api_set), curveid: curveid})\r\n                    }).then((res) => {\r\n                    fetch('/result').then((res) => res.json()).then((data) => {\r\n                        console.log(data); \r\n                        all_object.remove(smallcurveobjects);\r\n                        smallcurveobjects = new THREE.Object3D(); \r\n                        processdata(data)})\r\n                    }).then(() => {\r\n                        if (window.localStorage.getItem('ifsplit') === 'true'){\r\n                            fetch('/resultplot').then((res) => res.json()).then((data) => {\r\n                                console.log(data)\r\n                                changetraction(data['traction'])\r\n                                changeaflow(data['aflow'])\r\n                                changemodulenum(data['module_num'])\r\n                                changetime(data['time'])\r\n                            })\r\n                        }\r\n                    })\r\n                    \r\n                }\r\n            }\r\n        }\r\n        }\r\n\r\n        function animate() {\r\n\r\n            requestAnimationFrame( animate );\r\n            /*\r\n            controls.update();\r\n            */\r\n            render();\r\n\r\n        }\r\n\r\n        function render() {\r\n\r\n            // find intersections\r\n            //const rotateY = new THREE.Matrix4().makeRotationY( 0.005 );\r\n            //camera.applyMatrix4( rotateY );\r\n            raycaster.setFromCamera( mouse, camera );\r\n\r\n            const intersects = raycaster.intersectObjects( curveobjects.children, true );\r\n\r\n            if ( intersects.length > 0) {\r\n\r\n                sphereInter.visible = false;\r\n                sphereInter.position.copy( intersects[ 0 ].point );\r\n\r\n            } else {\r\n\r\n                sphereInter.visible = false;\r\n\r\n            }\r\n\r\n            renderer.render( scene, camera );\r\n            \r\n            var vector = new THREE.Vector3(mouse.x, mouse.y, 0.5);\r\n            vector.unproject( camera );\r\n            var dir = vector.sub( camera.position ).normalize();\r\n            var distance =  - camera.position.z / dir.z;\r\n            pos = camera.position.clone().add( dir.multiplyScalar( distance ) );\r\n\r\n            \r\n            if ( toggle > 0.02) {\r\n\r\n                spheres[ spheresIndex ].position.copy(pos);\r\n                spheres[ spheresIndex ].scale.set( 1, 1, 1 );\r\n                spheresIndex = ( spheresIndex + 1 ) % spheres.length;\r\n\r\n                toggle = 0;\r\n\r\n            }\r\n            for ( let i = 0; i < spheres.length; i ++ ) {\r\n\r\n                const sphere = spheres[ i ];\r\n                sphere.scale.multiplyScalar( 0.97 );\r\n                sphere.scale.clampScalar( 0.01, 10 );\r\n\r\n            }\r\n            \r\n            toggle += clock.getDelta();\r\n                \r\n\t\t\t}    \r\n    }, []);\r\n\r\n    const [modalShow, setshow] = useState(true)\r\n    const escFunction = ((event) => {\r\n        if(event.keyCode === 27) {\r\n          setshow(modalShow => !modalShow)\r\n        }\r\n      });\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\", escFunction);\r\n        return () => {\r\n          document.removeEventListener(\"keydown\", escFunction);\r\n        };\r\n    }, []);\r\n\r\n    if(window.localStorage.getItem('ifsplit') === 'false'){\r\n        return <>\r\n        <div \r\n            className = 'mainvisualization' \r\n            style = {{height : '100%', width: window.localStorage.getItem('ifsplit') === 'true'? '50%':'100%', border: '10px solid rgba(0, 0, 0, 0.7)'}} \r\n            ref = {mainVisRef}\r\n        />\r\n        <MyVerticallyCenteredModal\r\n            show={modalShow}\r\n            backdrop = 'static'\r\n            changeInput = {changeInput}\r\n        />\r\n        </>\r\n    } else {\r\n    return <>\r\n        <div style = {{height: '100%', width: '100%' , display:'flex', flexDirection:'row'}}>\r\n            <div \r\n                className = 'mainvisualization' \r\n                style = {{height : '100%', width: window.localStorage.getItem('ifsplit') === 'true'? '50%':'100%', border: '10px solid rgba(0, 0, 0, 0.7)'}} \r\n                ref = {mainVisRef}\r\n            />\r\n            <MyVerticallyCenteredModal\r\n                show={modalShow}\r\n                backdrop = 'static'\r\n                changeInput = {changeInput}\r\n            />\r\n            <Dataplot\r\n                traction = {traction}\r\n                aflow = {aflow}\r\n                modulenum = {modulenum}\r\n                time = {time}\r\n            />\r\n        </div>\r\n    </>\r\n    }\r\n}\r\n\r\nexport default Testapp\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport const MyContext = React.createContext(null);","import React from 'react';\r\nimport { useState, useEffect } from 'react'\r\nimport Testapp from './components/Testapp'\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {MyContext} from './ContextManager'\r\n\r\nfunction App() {\r\n  const [ifsuccess, changesuccess] = useState(false);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <MyContext.Provider value={0}>\r\n      <Testapp \r\n        ifsuccess = {ifsuccess} \r\n        onSuccess = {() => changesuccess(true)}\r\n      />\r\n      </MyContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}